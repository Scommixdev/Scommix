package com.scommix.WebServices.Common;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 8/5/2014 12:36:58 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//



import java.util.List;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.HeaderProperty;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import android.os.AsyncTask;
import org.ksoap2.serialization.MarshalFloat;

import com.scommix.WebServices.Common.WS_Enums.SoapProtocolVersion;

public class Common {
    
    public String NAMESPACE ="http://tempuri.org/";
    public String url="http://scommix.cloudapp.net/webservices/common.asmx";
    public int timeOut = 60000;
    public IWsdl2CodeEvents eventHandler;
    public SoapProtocolVersion soapVersion;
    
    public Common(){}
    
    public Common(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public Common(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public Common(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void GetStudentAttendanceByDateAsync(String studentid,String date) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetStudentAttendanceByDateAsync(studentid, date, null);
    }
    
    public void GetStudentAttendanceByDateAsync(final String studentid,final String date,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetStudentAttendanceByDate(studentid, date, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetStudentAttendanceByDate", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetStudentAttendanceByDate(String studentid,String date){
        return GetStudentAttendanceByDate(studentid, date, null);
    }
    
    public Vectoronline GetStudentAttendanceByDate(String studentid,String date,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetStudentAttendanceByDate");
        soapReq.addProperty("studentid",studentid);
        soapReq.addProperty("date",date);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetStudentAttendanceByDate", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetStudentAttendanceByDate", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetTimeTableAsync(String month,String classField,String instituteid,String pid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetTimeTableAsync(month, classField, instituteid, pid, null);
    }
    
    public void GetTimeTableAsync(final String month,final String classField,final String instituteid,final String pid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetTimeTable(month, classField, instituteid, pid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetTimeTable", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetTimeTable(String month,String classField,String instituteid,String pid){
        return GetTimeTable(month, classField, instituteid, pid, null);
    }
    
    public Vectoronline GetTimeTable(String month,String classField,String instituteid,String pid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetTimeTable");
        soapReq.addProperty("month",month);
        soapReq.addProperty("Class",classField);
        soapReq.addProperty("instituteid",instituteid);
        soapReq.addProperty("pid",pid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetTimeTable", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetTimeTable", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetResultAsync(String studentid,String instituteid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetResultAsync(studentid, instituteid, null);
    }
    
    public void GetResultAsync(final String studentid,final String instituteid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetResult(studentid, instituteid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetResult", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetResult(String studentid,String instituteid){
        return GetResult(studentid, instituteid, null);
    }
    
    public Vectoronline GetResult(String studentid,String instituteid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetResult");
        soapReq.addProperty("studentid",studentid);
        soapReq.addProperty("instituteid",instituteid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetResult", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetResult", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetStudentIdAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetStudentIdAsync(null);
    }
    
    public void GetStudentIdAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetStudentId(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetStudentId", result);
                }
            }
        }.execute();
    }
    
    public String GetStudentId(){
        return GetStudentId(null);
    }
    
    public String GetStudentId(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetStudentId");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetStudentId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetStudentId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetStudentNameAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetStudentNameAsync(null);
    }
    
    public void GetStudentNameAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetStudentName(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetStudentName", result);
                }
            }
        }.execute();
    }
    
    public String GetStudentName(){
        return GetStudentName(null);
    }
    
    public String GetStudentName(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetStudentName");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetStudentName", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetStudentName", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetInstituteIdAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetInstituteIdAsync(null);
    }
    
    public void GetInstituteIdAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetInstituteId(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetInstituteId", result);
                }
            }
        }.execute();
    }
    
    public String GetInstituteId(){
        return GetInstituteId(null);
    }
    
    public String GetInstituteId(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetInstituteId");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetInstituteId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetInstituteId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetHomeWorkSubjectAsync(String instituteid,String svimclassidField) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetHomeWorkSubjectAsync(instituteid, svimclassidField, null);
    }
    
    public void GetHomeWorkSubjectAsync(final String instituteid,final String svimclassidField,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetHomeWorkSubject(instituteid, svimclassidField, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetHomeWorkSubject", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetHomeWorkSubject(String instituteid,String svimclassidField){
        return GetHomeWorkSubject(instituteid, svimclassidField, null);
    }
    
    public Vectoronline GetHomeWorkSubject(String instituteid,String svimclassidField,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetHomeWorkSubject");
        soapReq.addProperty("instituteid",instituteid);
        soapReq.addProperty("svimclassid",svimclassidField);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetHomeWorkSubject", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetHomeWorkSubject", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetHomeWorkByIdAsync(String svimclassidField) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetHomeWorkByIdAsync(svimclassidField, null);
    }
    
    public void GetHomeWorkByIdAsync(final String svimclassidField,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetHomeWorkById(svimclassidField, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetHomeWorkById", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetHomeWorkById(String svimclassidField){
        return GetHomeWorkById(svimclassidField, null);
    }
    
    public Vectoronline GetHomeWorkById(String svimclassidField,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetHomeWorkById");
        soapReq.addProperty("svimclassid",svimclassidField);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetHomeWorkById", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetHomeWorkById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetHomeWorkDetailByClassIdAsync(String name,String svimclassidField) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetHomeWorkDetailByClassIdAsync(name, svimclassidField, null);
    }
    
    public void GetHomeWorkDetailByClassIdAsync(final String name,final String svimclassidField,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetHomeWorkDetailByClassId(name, svimclassidField, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetHomeWorkDetailByClassId", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetHomeWorkDetailByClassId(String name,String svimclassidField){
        return GetHomeWorkDetailByClassId(name, svimclassidField, null);
    }
    
    public Vectoronline GetHomeWorkDetailByClassId(String name,String svimclassidField,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetHomeWorkDetailByClassId");
        soapReq.addProperty("name",name);
        soapReq.addProperty("svimclassid",svimclassidField);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetHomeWorkDetailByClassId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetHomeWorkDetailByClassId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllPeroidsAsync(String month,String classField,String instituteid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllPeroidsAsync(month, classField, instituteid, null);
    }
    
    public void GetAllPeroidsAsync(final String month,final String classField,final String instituteid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetAllPeroids(month, classField, instituteid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllPeroids", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetAllPeroids(String month,String classField,String instituteid){
        return GetAllPeroids(month, classField, instituteid, null);
    }
    
    public Vectoronline GetAllPeroids(String month,String classField,String instituteid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetAllPeroids");
        soapReq.addProperty("month",month);
        soapReq.addProperty("Class",classField);
        soapReq.addProperty("instituteid",instituteid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetAllPeroids", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetAllPeroids", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetResultByMonthAsync(String studentid,String month) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetResultByMonthAsync(studentid, month, null);
    }
    
    public void GetResultByMonthAsync(final String studentid,final String month,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetResultByMonth(studentid, month, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetResultByMonth", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetResultByMonth(String studentid,String month){
        return GetResultByMonth(studentid, month, null);
    }
    
    public Vectoronline GetResultByMonth(String studentid,String month,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetResultByMonth");
        soapReq.addProperty("studentid",studentid);
        soapReq.addProperty("month",month);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetResultByMonth", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetResultByMonth", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetHomeWorkByDateAsync(String instituteid,String svimclassidField,String date) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetHomeWorkByDateAsync(instituteid, svimclassidField, date, null);
    }
    
    public void GetHomeWorkByDateAsync(final String instituteid,final String svimclassidField,final String date,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetHomeWorkByDate(instituteid, svimclassidField, date, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetHomeWorkByDate", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetHomeWorkByDate(String instituteid,String svimclassidField,String date){
        return GetHomeWorkByDate(instituteid, svimclassidField, date, null);
    }
    
    public Vectoronline GetHomeWorkByDate(String instituteid,String svimclassidField,String date,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetHomeWorkByDate");
        soapReq.addProperty("instituteid",instituteid);
        soapReq.addProperty("svimclassid",svimclassidField);
        soapReq.addProperty("date",date);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetHomeWorkByDate", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetHomeWorkByDate", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetCommentsCountByStatusIdAsync(String userstatusid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetCommentsCountByStatusIdAsync(userstatusid, null);
    }
    
    public void GetCommentsCountByStatusIdAsync(final String userstatusid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetCommentsCountByStatusId(userstatusid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetCommentsCountByStatusId", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetCommentsCountByStatusId(String userstatusid){
        return GetCommentsCountByStatusId(userstatusid, null);
    }
    
    public Vectoronline GetCommentsCountByStatusId(String userstatusid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetCommentsCountByStatusId");
        soapReq.addProperty("userstatusid",userstatusid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetCommentsCountByStatusId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetCommentsCountByStatusId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void UpdateEmailAsync(String email,String userid,String instituteid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateEmailAsync(email, userid, instituteid, null);
    }
    
    public void UpdateEmailAsync(final String email,final String userid,final String instituteid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                UpdateEmail(email, userid, instituteid, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpdateEmail", result);
                }
            }
        }.execute();
    }
    
    public void UpdateEmail(String email,String userid,String instituteid){
        UpdateEmail(email, userid, instituteid, null);
    }
    
    public void UpdateEmail(String email,String userid,String instituteid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","UpdateEmail");
        soapReq.addProperty("email",email);
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("instituteid",instituteid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/UpdateEmail", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/UpdateEmail", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void GetFeeAsync(String classIdField) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFeeAsync(classIdField, null);
    }
    
    public void GetFeeAsync(final String classIdField,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetFee(classIdField, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFee", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetFee(String classIdField){
        return GetFee(classIdField, null);
    }
    
    public Vectoronline GetFee(String classIdField,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetFee");
        soapReq.addProperty("ClassId",classIdField);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetFee", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetFee", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetFeeConcessionAsync(String studentid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFeeConcessionAsync(studentid, null);
    }
    
    public void GetFeeConcessionAsync(final String studentid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetFeeConcession(studentid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFeeConcession", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetFeeConcession(String studentid){
        return GetFeeConcession(studentid, null);
    }
    
    public Vectoronline GetFeeConcession(String studentid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetFeeConcession");
        soapReq.addProperty("studentid",studentid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetFeeConcession", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetFeeConcession", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void feeAmountDetailAsync(String studentid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        feeAmountDetailAsync(studentid, null);
    }
    
    public void feeAmountDetailAsync(final String studentid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return feeAmountDetail(studentid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("feeAmountDetail", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline feeAmountDetail(String studentid){
        return feeAmountDetail(studentid, null);
    }
    
    public Vectoronline feeAmountDetail(String studentid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","feeAmountDetail");
        soapReq.addProperty("studentid",studentid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/feeAmountDetail", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/feeAmountDetail", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetStuFeeDetailAsync(String studentid,String classIdField) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetStuFeeDetailAsync(studentid, classIdField, null);
    }
    
    public void GetStuFeeDetailAsync(final String studentid,final String classIdField,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetStuFeeDetail(studentid, classIdField, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetStuFeeDetail", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetStuFeeDetail(String studentid,String classIdField){
        return GetStuFeeDetail(studentid, classIdField, null);
    }
    
    public Vectoronline GetStuFeeDetail(String studentid,String classIdField,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetStuFeeDetail");
        soapReq.addProperty("studentid",studentid);
        soapReq.addProperty("ClassId",classIdField);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetStuFeeDetail", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetStuFeeDetail", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetFeeByFrequencyAsync(String studentid,String start_Month__c) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFeeByFrequencyAsync(studentid, start_Month__c, null);
    }
    
    public void GetFeeByFrequencyAsync(final String studentid,final String start_Month__c,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetFeeByFrequency(studentid, start_Month__c, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFeeByFrequency", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetFeeByFrequency(String studentid,String start_Month__c){
        return GetFeeByFrequency(studentid, start_Month__c, null);
    }
    
    public Vectoronline GetFeeByFrequency(String studentid,String start_Month__c,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetFeeByFrequency");
        soapReq.addProperty("studentid",studentid);
        soapReq.addProperty("Start_Month__c",start_Month__c);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetFeeByFrequency", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetFeeByFrequency", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetFeeByFrequencyClassBasedAsync(String start_Month__c) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFeeByFrequencyClassBasedAsync(start_Month__c, null);
    }
    
    public void GetFeeByFrequencyClassBasedAsync(final String start_Month__c,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetFeeByFrequencyClassBased(start_Month__c, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFeeByFrequencyClassBased", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetFeeByFrequencyClassBased(String start_Month__c){
        return GetFeeByFrequencyClassBased(start_Month__c, null);
    }
    
    public Vectoronline GetFeeByFrequencyClassBased(String start_Month__c,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetFeeByFrequencyClassBased");
        soapReq.addProperty("Start_Month__c",start_Month__c);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetFeeByFrequencyClassBased", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetFeeByFrequencyClassBased", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetTopHomeWorkAsync(String svimclassidField,String instituteid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetTopHomeWorkAsync(svimclassidField, instituteid, null);
    }
    
    public void GetTopHomeWorkAsync(final String svimclassidField,final String instituteid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetTopHomeWork(svimclassidField, instituteid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetTopHomeWork", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetTopHomeWork(String svimclassidField,String instituteid){
        return GetTopHomeWork(svimclassidField, instituteid, null);
    }
    
    public Vectoronline GetTopHomeWork(String svimclassidField,String instituteid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetTopHomeWork");
        soapReq.addProperty("svimclassid",svimclassidField);
        soapReq.addProperty("instituteid",instituteid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetTopHomeWork", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetTopHomeWork", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void UpdateUserCoverPicAsync(String userid,VectorByte coverPic) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateUserCoverPicAsync(userid, coverPic, null);
    }
    
    public void UpdateUserCoverPicAsync(final String userid,final VectorByte coverPic,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return UpdateUserCoverPic(userid, coverPic, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpdateUserCoverPic", result);
                }
            }
        }.execute();
    }
    
    public int UpdateUserCoverPic(String userid,VectorByte coverPic){
        return UpdateUserCoverPic(userid, coverPic, null);
    }
    
    public int UpdateUserCoverPic(String userid,VectorByte coverPic,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","UpdateUserCoverPic");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("CoverPic",coverPic.toString());
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/UpdateUserCoverPic", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/UpdateUserCoverPic", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void UpdateUserProfilePicAsync(String userid,VectorByte profilePic) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateUserProfilePicAsync(userid, profilePic, null);
    }
    
    public void UpdateUserProfilePicAsync(final String userid,final VectorByte profilePic,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return UpdateUserProfilePic(userid, profilePic, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpdateUserProfilePic", result);
                }
            }
        }.execute();
    }
    
    public int UpdateUserProfilePic(String userid,VectorByte profilePic){
        return UpdateUserProfilePic(userid, profilePic, null);
    }
    
    public int UpdateUserProfilePic(String userid,VectorByte profilePic,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","UpdateUserProfilePic");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("ProfilePic",profilePic.toString());
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/UpdateUserProfilePic", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/UpdateUserProfilePic", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void GetUserDetailnewAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUserDetailnewAsync(userid, null);
    }
    
    public void GetUserDetailnewAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetUserDetailnew(userid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetUserDetailnew", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetUserDetailnew(String userid){
        return GetUserDetailnew(userid, null);
    }
    
    public Vectoronline GetUserDetailnew(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetUserDetailnew");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetUserDetailnew", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetUserDetailnew", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void HelloWorldAsync(String email,String text) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        HelloWorldAsync(email, text, null);
    }
    
    public void HelloWorldAsync(final String email,final String text,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return HelloWorld(email, text, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("HelloWorld", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline HelloWorld(String email,String text){
        return HelloWorld(email, text, null);
    }
    
    public Vectoronline HelloWorld(String email,String text,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","HelloWorld");
        soapReq.addProperty("Email",email);
        soapReq.addProperty("Text",text);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/HelloWorld", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/HelloWorld", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void InsertProfileImageAsync(String userId,VectorByte profileImage) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        InsertProfileImageAsync(userId, profileImage, null);
    }
    
    public void InsertProfileImageAsync(final String userId,final VectorByte profileImage,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                InsertProfileImage(userId, profileImage, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("InsertProfileImage", result);
                }
            }
        }.execute();
    }
    
    public void InsertProfileImage(String userId,VectorByte profileImage){
        InsertProfileImage(userId, profileImage, null);
    }
    
    public void InsertProfileImage(String userId,VectorByte profileImage,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","InsertProfileImage");
        soapReq.addProperty("UserId",userId);
        soapReq.addProperty("ProfileImage",profileImage.toString());
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/InsertProfileImage", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/InsertProfileImage", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void UpdateMessageAsync(String userid,String friendId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateMessageAsync(userid, friendId, null);
    }
    
    public void UpdateMessageAsync(final String userid,final String friendId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                UpdateMessage(userid, friendId, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpdateMessage", result);
                }
            }
        }.execute();
    }
    
    public void UpdateMessage(String userid,String friendId){
        UpdateMessage(userid, friendId, null);
    }
    
    public void UpdateMessage(String userid,String friendId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","UpdateMessage");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("friendId",friendId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/UpdateMessage", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/UpdateMessage", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void GetProfileStatusAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetProfileStatusAsync(userid, null);
    }
    
    public void GetProfileStatusAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorUpdates>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorUpdates doInBackground(Void... params) {
                return GetProfileStatus(userid, headers);
            }
            @Override
            protected void onPostExecute(VectorUpdates result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetProfileStatus", result);
                }
            }
        }.execute();
    }
    
    public VectorUpdates GetProfileStatus(String userid){
        return GetProfileStatus(userid, null);
    }
    
    public VectorUpdates GetProfileStatus(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetProfileStatus");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetProfileStatus", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetProfileStatus", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorUpdates resultVariable = new VectorUpdates(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void SendMessageFriendAsync(String senderid,String friendid,String message) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SendMessageFriendAsync(senderid, friendid, message, null);
    }
    
    public void SendMessageFriendAsync(final String senderid,final String friendid,final String message,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                SendMessageFriend(senderid, friendid, message, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SendMessageFriend", result);
                }
            }
        }.execute();
    }
    
    public void SendMessageFriend(String senderid,String friendid,String message){
        SendMessageFriend(senderid, friendid, message, null);
    }
    
    public void SendMessageFriend(String senderid,String friendid,String message,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","SendMessageFriend");
        soapReq.addProperty("senderid",senderid);
        soapReq.addProperty("friendid",friendid);
        soapReq.addProperty("message",message);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/SendMessageFriend", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/SendMessageFriend", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void SendBirthdayMessageAsync(String senderid,String friendid,String message) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SendBirthdayMessageAsync(senderid, friendid, message, null);
    }
    
    public void SendBirthdayMessageAsync(final String senderid,final String friendid,final String message,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                SendBirthdayMessage(senderid, friendid, message, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SendBirthdayMessage", result);
                }
            }
        }.execute();
    }
    
    public void SendBirthdayMessage(String senderid,String friendid,String message){
        SendBirthdayMessage(senderid, friendid, message, null);
    }
    
    public void SendBirthdayMessage(String senderid,String friendid,String message,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","SendBirthdayMessage");
        soapReq.addProperty("senderid",senderid);
        soapReq.addProperty("friendid",friendid);
        soapReq.addProperty("message",message);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/SendBirthdayMessage", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/SendBirthdayMessage", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void CheckFriendRequestAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CheckFriendRequestAsync(userid, null);
    }
    
    public void CheckFriendRequestAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                CheckFriendRequest(userid, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("CheckFriendRequest", result);
                }
            }
        }.execute();
    }
    
    public void CheckFriendRequest(String userid){
        CheckFriendRequest(userid, null);
    }
    
    public void CheckFriendRequest(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","CheckFriendRequest");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/CheckFriendRequest", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/CheckFriendRequest", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void GetCurrentUserNameAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetCurrentUserNameAsync(null);
    }
    
    public void GetCurrentUserNameAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetCurrentUserName(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetCurrentUserName", result);
                }
            }
        }.execute();
    }
    
    public String GetCurrentUserName(){
        return GetCurrentUserName(null);
    }
    
    public String GetCurrentUserName(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetCurrentUserName");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetCurrentUserName", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetCurrentUserName", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetCurrentIstituteIdAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetCurrentIstituteIdAsync(null);
    }
    
    public void GetCurrentIstituteIdAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetCurrentIstituteId(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetCurrentIstituteId", result);
                }
            }
        }.execute();
    }
    
    public String GetCurrentIstituteId(){
        return GetCurrentIstituteId(null);
    }
    
    public String GetCurrentIstituteId(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetCurrentIstituteId");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetCurrentIstituteId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetCurrentIstituteId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetNoticeAsync(String instituteid,String classidField) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetNoticeAsync(instituteid, classidField, null);
    }
    
    public void GetNoticeAsync(final String instituteid,final String classidField,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorStuNotice>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorStuNotice doInBackground(Void... params) {
                return GetNotice(instituteid, classidField, headers);
            }
            @Override
            protected void onPostExecute(VectorStuNotice result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetNotice", result);
                }
            }
        }.execute();
    }
    
    public VectorStuNotice GetNotice(String instituteid,String classidField){
        return GetNotice(instituteid, classidField, null);
    }
    
    public VectorStuNotice GetNotice(String instituteid,String classidField,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetNotice");
        soapReq.addProperty("instituteid",instituteid);
        soapReq.addProperty("classid",classidField);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetNotice", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetNotice", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorStuNotice resultVariable = new VectorStuNotice(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetNotice1Async(String instituteid,String classidField,String posteddate) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetNotice1Async(instituteid, classidField, posteddate, null);
    }
    
    public void GetNotice1Async(final String instituteid,final String classidField,final String posteddate,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorStuNotice>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorStuNotice doInBackground(Void... params) {
                return GetNotice1(instituteid, classidField, posteddate, headers);
            }
            @Override
            protected void onPostExecute(VectorStuNotice result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetNotice1", result);
                }
            }
        }.execute();
    }
    
    public VectorStuNotice GetNotice1(String instituteid,String classidField,String posteddate){
        return GetNotice1(instituteid, classidField, posteddate, null);
    }
    
    public VectorStuNotice GetNotice1(String instituteid,String classidField,String posteddate,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetNotice1");
        soapReq.addProperty("instituteid",instituteid);
        soapReq.addProperty("classid",classidField);
        soapReq.addProperty("posteddate",posteddate);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetNotice1", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetNotice1", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorStuNotice resultVariable = new VectorStuNotice(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetNoticeCommentAsync(String noticeid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetNoticeCommentAsync(noticeid, null);
    }
    
    public void GetNoticeCommentAsync(final String noticeid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetNoticeComment(noticeid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetNoticeComment", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetNoticeComment(String noticeid){
        return GetNoticeComment(noticeid, null);
    }
    
    public Vectoronline GetNoticeComment(String noticeid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetNoticeComment");
        soapReq.addProperty("noticeid",noticeid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetNoticeComment", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetNoticeComment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void InsertNoticeCommentAsync(String userid,String noticeid,String noticecomment) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        InsertNoticeCommentAsync(userid, noticeid, noticecomment, null);
    }
    
    public void InsertNoticeCommentAsync(final String userid,final String noticeid,final String noticecomment,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                InsertNoticeComment(userid, noticeid, noticecomment, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("InsertNoticeComment", result);
                }
            }
        }.execute();
    }
    
    public void InsertNoticeComment(String userid,String noticeid,String noticecomment){
        InsertNoticeComment(userid, noticeid, noticecomment, null);
    }
    
    public void InsertNoticeComment(String userid,String noticeid,String noticecomment,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","InsertNoticeComment");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("noticeid",noticeid);
        soapReq.addProperty("noticecomment",noticecomment);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/InsertNoticeComment", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/InsertNoticeComment", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void GetCommentsCountByNoticeIdAsync(String noticeid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetCommentsCountByNoticeIdAsync(noticeid, null);
    }
    
    public void GetCommentsCountByNoticeIdAsync(final String noticeid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetCommentsCountByNoticeId(noticeid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetCommentsCountByNoticeId", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetCommentsCountByNoticeId(String noticeid){
        return GetCommentsCountByNoticeId(noticeid, null);
    }
    
    public Vectoronline GetCommentsCountByNoticeId(String noticeid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetCommentsCountByNoticeId");
        soapReq.addProperty("noticeid",noticeid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetCommentsCountByNoticeId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetCommentsCountByNoticeId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllNoticeCommentsCountAsync(String noticeid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllNoticeCommentsCountAsync(noticeid, null);
    }
    
    public void GetAllNoticeCommentsCountAsync(final String noticeid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetAllNoticeCommentsCount(noticeid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllNoticeCommentsCount", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetAllNoticeCommentsCount(String noticeid){
        return GetAllNoticeCommentsCount(noticeid, null);
    }
    
    public Vectoronline GetAllNoticeCommentsCount(String noticeid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetAllNoticeCommentsCount");
        soapReq.addProperty("noticeid",noticeid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetAllNoticeCommentsCount", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetAllNoticeCommentsCount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void CountAllNoticeLikeAsync(String noticeid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CountAllNoticeLikeAsync(noticeid, null);
    }
    
    public void CountAllNoticeLikeAsync(final String noticeid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return CountAllNoticeLike(noticeid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("CountAllNoticeLike", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline CountAllNoticeLike(String noticeid){
        return CountAllNoticeLike(noticeid, null);
    }
    
    public Vectoronline CountAllNoticeLike(String noticeid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","CountAllNoticeLike");
        soapReq.addProperty("noticeid",noticeid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/CountAllNoticeLike", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/CountAllNoticeLike", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void InsertNoticeLikeNewAsync(String userid,String noticeid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        InsertNoticeLikeNewAsync(userid, noticeid, null);
    }
    
    public void InsertNoticeLikeNewAsync(final String userid,final String noticeid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                InsertNoticeLikeNew(userid, noticeid, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("InsertNoticeLikeNew", result);
                }
            }
        }.execute();
    }
    
    public void InsertNoticeLikeNew(String userid,String noticeid){
        InsertNoticeLikeNew(userid, noticeid, null);
    }
    
    public void InsertNoticeLikeNew(String userid,String noticeid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","InsertNoticeLikeNew");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("noticeid",noticeid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/InsertNoticeLikeNew", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/InsertNoticeLikeNew", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void UpdateNoticeLikeNewAsync(String userid,String noticeid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateNoticeLikeNewAsync(userid, noticeid, null);
    }
    
    public void UpdateNoticeLikeNewAsync(final String userid,final String noticeid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return UpdateNoticeLikeNew(userid, noticeid, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpdateNoticeLikeNew", result);
                }
            }
        }.execute();
    }
    
    public int UpdateNoticeLikeNew(String userid,String noticeid){
        return UpdateNoticeLikeNew(userid, noticeid, null);
    }
    
    public int UpdateNoticeLikeNew(String userid,String noticeid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","UpdateNoticeLikeNew");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("noticeid",noticeid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/UpdateNoticeLikeNew", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/UpdateNoticeLikeNew", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void UpdateNoticeCountAsync(String instituteid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateNoticeCountAsync(instituteid, null);
    }
    
    public void UpdateNoticeCountAsync(final String instituteid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return UpdateNoticeCount(instituteid, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpdateNoticeCount", result);
                }
            }
        }.execute();
    }
    
    public int UpdateNoticeCount(String instituteid){
        return UpdateNoticeCount(instituteid, null);
    }
    
    public int UpdateNoticeCount(String instituteid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","UpdateNoticeCount");
        soapReq.addProperty("instituteid",instituteid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/UpdateNoticeCount", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/UpdateNoticeCount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void GetNoticeCountAsync(String instituteid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetNoticeCountAsync(instituteid, null);
    }
    
    public void GetNoticeCountAsync(final String instituteid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorStuNotice>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorStuNotice doInBackground(Void... params) {
                return GetNoticeCount(instituteid, headers);
            }
            @Override
            protected void onPostExecute(VectorStuNotice result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetNoticeCount", result);
                }
            }
        }.execute();
    }
    
    public VectorStuNotice GetNoticeCount(String instituteid){
        return GetNoticeCount(instituteid, null);
    }
    
    public VectorStuNotice GetNoticeCount(String instituteid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetNoticeCount");
        soapReq.addProperty("instituteid",instituteid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetNoticeCount", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetNoticeCount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorStuNotice resultVariable = new VectorStuNotice(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllStaticPagesAsync(String staticpageid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllStaticPagesAsync(staticpageid, null);
    }
    
    public void GetAllStaticPagesAsync(final String staticpageid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetAllStaticPages(staticpageid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllStaticPages", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetAllStaticPages(String staticpageid){
        return GetAllStaticPages(staticpageid, null);
    }
    
    public Vectoronline GetAllStaticPages(String staticpageid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetAllStaticPages");
        soapReq.addProperty("staticpageid",staticpageid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetAllStaticPages", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetAllStaticPages", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetStaticPagesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetStaticPagesAsync(null);
    }
    
    public void GetStaticPagesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetStaticPages(headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetStaticPages", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetStaticPages(){
        return GetStaticPages(null);
    }
    
    public Vectoronline GetStaticPages(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetStaticPages");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetStaticPages", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetStaticPages", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void InsertUpdateStaticPagesAsync(String staticpageid,String staticpagename,String description,String active,String hyperlink) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        InsertUpdateStaticPagesAsync(staticpageid, staticpagename, description, active, hyperlink, null);
    }
    
    public void InsertUpdateStaticPagesAsync(final String staticpageid,final String staticpagename,final String description,final String active,final String hyperlink,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return InsertUpdateStaticPages(staticpageid, staticpagename, description, active, hyperlink, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("InsertUpdateStaticPages", result);
                }
            }
        }.execute();
    }
    
    public String InsertUpdateStaticPages(String staticpageid,String staticpagename,String description,String active,String hyperlink){
        return InsertUpdateStaticPages(staticpageid, staticpagename, description, active, hyperlink, null);
    }
    
    public String InsertUpdateStaticPages(String staticpageid,String staticpagename,String description,String active,String hyperlink,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","InsertUpdateStaticPages");
        soapReq.addProperty("staticpageid",staticpageid);
        soapReq.addProperty("staticpagename",staticpagename);
        soapReq.addProperty("description",description);
        soapReq.addProperty("active",active);
        soapReq.addProperty("hyperlink",hyperlink);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/InsertUpdateStaticPages", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/InsertUpdateStaticPages", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetNotificationAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetNotificationAsync(userid, null);
    }
    
    public void GetNotificationAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetNotification(userid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetNotification", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetNotification(String userid){
        return GetNotification(userid, null);
    }
    
    public Vectoronline GetNotification(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetNotification");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetNotification", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetNotification", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetNotification1Async(String userid,String postedtime) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetNotification1Async(userid, postedtime, null);
    }
    
    public void GetNotification1Async(final String userid,final String postedtime,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetNotification1(userid, postedtime, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetNotification1", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetNotification1(String userid,String postedtime){
        return GetNotification1(userid, postedtime, null);
    }
    
    public Vectoronline GetNotification1(String userid,String postedtime,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetNotification1");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("postedtime",postedtime);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetNotification1", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetNotification1", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void InsertContactAsync(String name,String emailid,String phnumber,String query) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        InsertContactAsync(name, emailid, phnumber, query, null);
    }
    
    public void InsertContactAsync(final String name,final String emailid,final String phnumber,final String query,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                InsertContact(name, emailid, phnumber, query, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("InsertContact", result);
                }
            }
        }.execute();
    }
    
    public void InsertContact(String name,String emailid,String phnumber,String query){
        InsertContact(name, emailid, phnumber, query, null);
    }
    
    public void InsertContact(String name,String emailid,String phnumber,String query,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","InsertContact");
        soapReq.addProperty("name",name);
        soapReq.addProperty("emailid",emailid);
        soapReq.addProperty("phnumber",phnumber);
        soapReq.addProperty("query",query);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/InsertContact", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/InsertContact", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void deletenotificationAsync(String userid,String nid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deletenotificationAsync(userid, nid, null);
    }
    
    public void deletenotificationAsync(final String userid,final String nid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                deletenotification(userid, nid, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deletenotification", result);
                }
            }
        }.execute();
    }
    
    public void deletenotification(String userid,String nid){
        deletenotification(userid, nid, null);
    }
    
    public void deletenotification(String userid,String nid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","deletenotification");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("nid",nid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/deletenotification", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/deletenotification", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void DeleteStatusAsync(String userid,String userstatusid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DeleteStatusAsync(userid, userstatusid, null);
    }
    
    public void DeleteStatusAsync(final String userid,final String userstatusid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                DeleteStatus(userid, userstatusid, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DeleteStatus", result);
                }
            }
        }.execute();
    }
    
    public void DeleteStatus(String userid,String userstatusid){
        DeleteStatus(userid, userstatusid, null);
    }
    
    public void DeleteStatus(String userid,String userstatusid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","DeleteStatus");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("userstatusid",userstatusid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/DeleteStatus", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/DeleteStatus", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void GetFriendCountAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFriendCountAsync(userid, null);
    }
    
    public void GetFriendCountAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetFriendCount(userid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFriendCount", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetFriendCount(String userid){
        return GetFriendCount(userid, null);
    }
    
    public Vectoronline GetFriendCount(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetFriendCount");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetFriendCount", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetFriendCount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetNewNotificationCountAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetNewNotificationCountAsync(userid, null);
    }
    
    public void GetNewNotificationCountAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetNewNotificationCount(userid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetNewNotificationCount", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetNewNotificationCount(String userid){
        return GetNewNotificationCount(userid, null);
    }
    
    public Vectoronline GetNewNotificationCount(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetNewNotificationCount");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetNewNotificationCount", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetNewNotificationCount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void UpadteSeenNotificationAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpadteSeenNotificationAsync(userid, null);
    }
    
    public void UpadteSeenNotificationAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                UpadteSeenNotification(userid, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpadteSeenNotification", result);
                }
            }
        }.execute();
    }
    
    public void UpadteSeenNotification(String userid){
        UpadteSeenNotification(userid, null);
    }
    
    public void UpadteSeenNotification(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","UpadteSeenNotification");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/UpadteSeenNotification", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/UpadteSeenNotification", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void GetpersonalInfoAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetpersonalInfoAsync(userid, null);
    }
    
    public void GetpersonalInfoAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetpersonalInfo(userid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetpersonalInfo", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetpersonalInfo(String userid){
        return GetpersonalInfo(userid, null);
    }
    
    public Vectoronline GetpersonalInfo(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetpersonalInfo");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetpersonalInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetpersonalInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetHomeWorkAsync(String svimclassidField) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetHomeWorkAsync(svimclassidField, null);
    }
    
    public void GetHomeWorkAsync(final String svimclassidField,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetHomeWork(svimclassidField, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetHomeWork", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetHomeWork(String svimclassidField){
        return GetHomeWork(svimclassidField, null);
    }
    
    public Vectoronline GetHomeWork(String svimclassidField,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetHomeWork");
        soapReq.addProperty("svimclassid",svimclassidField);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetHomeWork", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetHomeWork", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetStudentAttendanceAsync(String svimEduId,int instituteId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetStudentAttendanceAsync(svimEduId, instituteId, null);
    }
    
    public void GetStudentAttendanceAsync(final String svimEduId,final int instituteId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetStudentAttendance(svimEduId, instituteId, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetStudentAttendance", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetStudentAttendance(String svimEduId,int instituteId){
        return GetStudentAttendance(svimEduId, instituteId, null);
    }
    
    public Vectoronline GetStudentAttendance(String svimEduId,int instituteId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetStudentAttendance");
        soapReq.addProperty("SvimEduId",svimEduId);
        soapReq.addProperty("InstituteId",instituteId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetStudentAttendance", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetStudentAttendance", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetBirthdayAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetBirthdayAsync(userid, null);
    }
    
    public void GetBirthdayAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetBirthday(userid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetBirthday", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetBirthday(String userid){
        return GetBirthday(userid, null);
    }
    
    public Vectoronline GetBirthday(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetBirthday");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetBirthday", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetBirthday", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetUserDetailAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUserDetailAsync(userid, null);
    }
    
    public void GetUserDetailAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetUserDetail(userid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetUserDetail", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetUserDetail(String userid){
        return GetUserDetail(userid, null);
    }
    
    public Vectoronline GetUserDetail(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetUserDetail");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetUserDetail", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetUserDetail", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void UpdateProfileAsync(String firstname,String lastname,String dob,String addressline1,String addressline2,String city,String country,String gender,String userid,String zipcode,String state,String c_addressline1,String c_addressline2) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateProfileAsync(firstname, lastname, dob, addressline1, addressline2, city, country, gender, userid, zipcode, state, c_addressline1, c_addressline2, null);
    }
    
    public void UpdateProfileAsync(final String firstname,final String lastname,final String dob,final String addressline1,final String addressline2,final String city,final String country,final String gender,final String userid,final String zipcode,final String state,final String c_addressline1,final String c_addressline2,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                UpdateProfile(firstname, lastname, dob, addressline1, addressline2, city, country, gender, userid, zipcode, state, c_addressline1, c_addressline2, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpdateProfile", result);
                }
            }
        }.execute();
    }
    
    public void UpdateProfile(String firstname,String lastname,String dob,String addressline1,String addressline2,String city,String country,String gender,String userid,String zipcode,String state,String c_addressline1,String c_addressline2){
        UpdateProfile(firstname, lastname, dob, addressline1, addressline2, city, country, gender, userid, zipcode, state, c_addressline1, c_addressline2, null);
    }
    
    public void UpdateProfile(String firstname,String lastname,String dob,String addressline1,String addressline2,String city,String country,String gender,String userid,String zipcode,String state,String c_addressline1,String c_addressline2,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","UpdateProfile");
        soapReq.addProperty("firstname",firstname);
        soapReq.addProperty("lastname",lastname);
        soapReq.addProperty("dob",dob);
        soapReq.addProperty("addressline1",addressline1);
        soapReq.addProperty("addressline2",addressline2);
        soapReq.addProperty("city",city);
        soapReq.addProperty("country",country);
        soapReq.addProperty("gender",gender);
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("zipcode",zipcode);
        soapReq.addProperty("state",state);
        soapReq.addProperty("C_addressline1",c_addressline1);
        soapReq.addProperty("C_addressline2",c_addressline2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/UpdateProfile", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/UpdateProfile", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void GetCountryDropdownAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetCountryDropdownAsync(null);
    }
    
    public void GetCountryDropdownAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetCountryDropdown(headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetCountryDropdown", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetCountryDropdown(){
        return GetCountryDropdown(null);
    }
    
    public Vectoronline GetCountryDropdown(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetCountryDropdown");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetCountryDropdown", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetCountryDropdown", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetMessageAsync(String senderid,String friendid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetMessageAsync(senderid, friendid, null);
    }
    
    public void GetMessageAsync(final String senderid,final String friendid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetMessage(senderid, friendid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetMessage", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetMessage(String senderid,String friendid){
        return GetMessage(senderid, friendid, null);
    }
    
    public Vectoronline GetMessage(String senderid,String friendid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetMessage");
        soapReq.addProperty("senderid",senderid);
        soapReq.addProperty("friendid",friendid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetMessage", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetMessage", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetMessageFriendListAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetMessageFriendListAsync(userid, null);
    }
    
    public void GetMessageFriendListAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetMessageFriendList(userid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetMessageFriendList", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetMessageFriendList(String userid){
        return GetMessageFriendList(userid, null);
    }
    
    public Vectoronline GetMessageFriendList(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetMessageFriendList");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetMessageFriendList", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetMessageFriendList", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetFriendListAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFriendListAsync(userid, null);
    }
    
    public void GetFriendListAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetFriendList(userid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFriendList", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetFriendList(String userid){
        return GetFriendList(userid, null);
    }
    
    public Vectoronline GetFriendList(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetFriendList");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetFriendList", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetFriendList", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetMessageFriendSearchAsync(String userid,String senderId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetMessageFriendSearchAsync(userid, senderId, null);
    }
    
    public void GetMessageFriendSearchAsync(final String userid,final String senderId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetMessageFriendSearch(userid, senderId, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetMessageFriendSearch", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetMessageFriendSearch(String userid,String senderId){
        return GetMessageFriendSearch(userid, senderId, null);
    }
    
    public Vectoronline GetMessageFriendSearch(String userid,String senderId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetMessageFriendSearch");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("senderId",senderId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetMessageFriendSearch", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetMessageFriendSearch", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetFriendSearchAsync(String userid,String name) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFriendSearchAsync(userid, name, null);
    }
    
    public void GetFriendSearchAsync(final String userid,final String name,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetFriendSearch(userid, name, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFriendSearch", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetFriendSearch(String userid,String name){
        return GetFriendSearch(userid, name, null);
    }
    
    public Vectoronline GetFriendSearch(String userid,String name,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetFriendSearch");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("name",name);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetFriendSearch", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetFriendSearch", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void SendMessageAsync(String senderid,String friendid,String message) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SendMessageAsync(senderid, friendid, message, null);
    }
    
    public void SendMessageAsync(final String senderid,final String friendid,final String message,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                SendMessage(senderid, friendid, message, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SendMessage", result);
                }
            }
        }.execute();
    }
    
    public void SendMessage(String senderid,String friendid,String message){
        SendMessage(senderid, friendid, message, null);
    }
    
    public void SendMessage(String senderid,String friendid,String message,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","SendMessage");
        soapReq.addProperty("senderid",senderid);
        soapReq.addProperty("friendid",friendid);
        soapReq.addProperty("message",message);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/SendMessage", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/SendMessage", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void GetFriendDropdownForMessageAsync(String senderid,String name) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFriendDropdownForMessageAsync(senderid, name, null);
    }
    
    public void GetFriendDropdownForMessageAsync(final String senderid,final String name,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetFriendDropdownForMessage(senderid, name, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFriendDropdownForMessage", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetFriendDropdownForMessage(String senderid,String name){
        return GetFriendDropdownForMessage(senderid, name, null);
    }
    
    public Vectoronline GetFriendDropdownForMessage(String senderid,String name,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetFriendDropdownForMessage");
        soapReq.addProperty("senderid",senderid);
        soapReq.addProperty("name",name);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetFriendDropdownForMessage", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetFriendDropdownForMessage", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void SendMessageSearchNewAsync(String senderid,String friendid,String message) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SendMessageSearchNewAsync(senderid, friendid, message, null);
    }
    
    public void SendMessageSearchNewAsync(final String senderid,final String friendid,final String message,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                SendMessageSearchNew(senderid, friendid, message, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SendMessageSearchNew", result);
                }
            }
        }.execute();
    }
    
    public void SendMessageSearchNew(String senderid,String friendid,String message){
        SendMessageSearchNew(senderid, friendid, message, null);
    }
    
    public void SendMessageSearchNew(String senderid,String friendid,String message,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","SendMessageSearchNew");
        soapReq.addProperty("senderid",senderid);
        soapReq.addProperty("friendid",friendid);
        soapReq.addProperty("message",message);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/SendMessageSearchNew", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/SendMessageSearchNew", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void CountAllSatatusLikeAsync(String userstatusid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CountAllSatatusLikeAsync(userstatusid, null);
    }
    
    public void CountAllSatatusLikeAsync(final String userstatusid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return CountAllSatatusLike(userstatusid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("CountAllSatatusLike", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline CountAllSatatusLike(String userstatusid){
        return CountAllSatatusLike(userstatusid, null);
    }
    
    public Vectoronline CountAllSatatusLike(String userstatusid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","CountAllSatatusLike");
        soapReq.addProperty("userstatusid",userstatusid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/CountAllSatatusLike", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/CountAllSatatusLike", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetAllCommentsCountAsync(String userstatusid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllCommentsCountAsync(userstatusid, null);
    }
    
    public void GetAllCommentsCountAsync(final String userstatusid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetAllCommentsCount(userstatusid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetAllCommentsCount", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetAllCommentsCount(String userstatusid){
        return GetAllCommentsCount(userstatusid, null);
    }
    
    public Vectoronline GetAllCommentsCount(String userstatusid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetAllCommentsCount");
        soapReq.addProperty("userstatusid",userstatusid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetAllCommentsCount", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetAllCommentsCount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void UpdateStatusLikeNewAsync(String userid,String userstatusid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateStatusLikeNewAsync(userid, userstatusid, null);
    }
    
    public void UpdateStatusLikeNewAsync(final String userid,final String userstatusid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return UpdateStatusLikeNew(userid, userstatusid, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpdateStatusLikeNew", result);
                }
            }
        }.execute();
    }
    
    public int UpdateStatusLikeNew(String userid,String userstatusid){
        return UpdateStatusLikeNew(userid, userstatusid, null);
    }
    
    public int UpdateStatusLikeNew(String userid,String userstatusid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","UpdateStatusLikeNew");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("userstatusid",userstatusid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/UpdateStatusLikeNew", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/UpdateStatusLikeNew", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void InsertStatusLikeNewAsync(String userid,String userstatusid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        InsertStatusLikeNewAsync(userid, userstatusid, null);
    }
    
    public void InsertStatusLikeNewAsync(final String userid,final String userstatusid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                InsertStatusLikeNew(userid, userstatusid, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("InsertStatusLikeNew", result);
                }
            }
        }.execute();
    }
    
    public void InsertStatusLikeNew(String userid,String userstatusid){
        InsertStatusLikeNew(userid, userstatusid, null);
    }
    
    public void InsertStatusLikeNew(String userid,String userstatusid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","InsertStatusLikeNew");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("userstatusid",userstatusid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/InsertStatusLikeNew", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/InsertStatusLikeNew", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void InsertCommentAsync(String userid,String statusid,String comment) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        InsertCommentAsync(userid, statusid, comment, null);
    }
    
    public void InsertCommentAsync(final String userid,final String statusid,final String comment,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                InsertComment(userid, statusid, comment, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("InsertComment", result);
                }
            }
        }.execute();
    }
    
    public void InsertComment(String userid,String statusid,String comment){
        InsertComment(userid, statusid, comment, null);
    }
    
    public void InsertComment(String userid,String statusid,String comment,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","InsertComment");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("statusid",statusid);
        soapReq.addProperty("comment",comment);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/InsertComment", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/InsertComment", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void InsertPersonalInfoAsync(String userid,String instituteid,String fathername,String mothername,String mobileno,String landlineno,String siblings,String numberofsiblings,String _classField,String fatheroccupation,String motheroccupation) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        InsertPersonalInfoAsync(userid, instituteid, fathername, mothername, mobileno, landlineno, siblings, numberofsiblings, _classField, fatheroccupation, motheroccupation, null);
    }
    
    public void InsertPersonalInfoAsync(final String userid,final String instituteid,final String fathername,final String mothername,final String mobileno,final String landlineno,final String siblings,final String numberofsiblings,final String _classField,final String fatheroccupation,final String motheroccupation,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                InsertPersonalInfo(userid, instituteid, fathername, mothername, mobileno, landlineno, siblings, numberofsiblings, _classField, fatheroccupation, motheroccupation, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("InsertPersonalInfo", result);
                }
            }
        }.execute();
    }
    
    public void InsertPersonalInfo(String userid,String instituteid,String fathername,String mothername,String mobileno,String landlineno,String siblings,String numberofsiblings,String _classField,String fatheroccupation,String motheroccupation){
        InsertPersonalInfo(userid, instituteid, fathername, mothername, mobileno, landlineno, siblings, numberofsiblings, _classField, fatheroccupation, motheroccupation, null);
    }
    
    public void InsertPersonalInfo(String userid,String instituteid,String fathername,String mothername,String mobileno,String landlineno,String siblings,String numberofsiblings,String _classField,String fatheroccupation,String motheroccupation,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","InsertPersonalInfo");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("instituteid",instituteid);
        soapReq.addProperty("fathername",fathername);
        soapReq.addProperty("mothername",mothername);
        soapReq.addProperty("mobileno",mobileno);
        soapReq.addProperty("landlineno",landlineno);
        soapReq.addProperty("siblings",siblings);
        soapReq.addProperty("numberofsiblings",numberofsiblings);
        soapReq.addProperty("_class",_classField);
        soapReq.addProperty("fatheroccupation",fatheroccupation);
        soapReq.addProperty("motheroccupation",motheroccupation);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/InsertPersonalInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/InsertPersonalInfo", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void GetCommentAsync(String statusid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetCommentAsync(statusid, null);
    }
    
    public void GetCommentAsync(final String statusid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetComment(statusid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetComment", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetComment(String statusid){
        return GetComment(statusid, null);
    }
    
    public Vectoronline GetComment(String statusid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetComment");
        soapReq.addProperty("statusid",statusid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetComment", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetComment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetFriendRequestAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFriendRequestAsync(userid, null);
    }
    
    public void GetFriendRequestAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetFriendRequest(userid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFriendRequest", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetFriendRequest(String userid){
        return GetFriendRequest(userid, null);
    }
    
    public Vectoronline GetFriendRequest(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetFriendRequest");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetFriendRequest", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetFriendRequest", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetFriendRequestByUserFriendAsync(String userid,String friendid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFriendRequestByUserFriendAsync(userid, friendid, null);
    }
    
    public void GetFriendRequestByUserFriendAsync(final String userid,final String friendid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetFriendRequestByUserFriend(userid, friendid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFriendRequestByUserFriend", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetFriendRequestByUserFriend(String userid,String friendid){
        return GetFriendRequestByUserFriend(userid, friendid, null);
    }
    
    public Vectoronline GetFriendRequestByUserFriend(String userid,String friendid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetFriendRequestByUserFriend");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("friendid",friendid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetFriendRequestByUserFriend", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetFriendRequestByUserFriend", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void DeleteFriendAsync(String senderid,String frndid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DeleteFriendAsync(senderid, frndid, null);
    }
    
    public void DeleteFriendAsync(final String senderid,final String frndid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                DeleteFriend(senderid, frndid, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DeleteFriend", result);
                }
            }
        }.execute();
    }
    
    public void DeleteFriend(String senderid,String frndid){
        DeleteFriend(senderid, frndid, null);
    }
    
    public void DeleteFriend(String senderid,String frndid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","DeleteFriend");
        soapReq.addProperty("senderid",senderid);
        soapReq.addProperty("frndid",frndid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/DeleteFriend", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/DeleteFriend", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void CancelFriendRequestAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CancelFriendRequestAsync(userid, null);
    }
    
    public void CancelFriendRequestAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                CancelFriendRequest(userid, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("CancelFriendRequest", result);
                }
            }
        }.execute();
    }
    
    public void CancelFriendRequest(String userid){
        CancelFriendRequest(userid, null);
    }
    
    public void CancelFriendRequest(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","CancelFriendRequest");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/CancelFriendRequest", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/CancelFriendRequest", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void ConfrimFriendRequestAsync(String userid,String senderid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ConfrimFriendRequestAsync(userid, senderid, null);
    }
    
    public void ConfrimFriendRequestAsync(final String userid,final String senderid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                ConfrimFriendRequest(userid, senderid, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ConfrimFriendRequest", result);
                }
            }
        }.execute();
    }
    
    public void ConfrimFriendRequest(String userid,String senderid){
        ConfrimFriendRequest(userid, senderid, null);
    }
    
    public void ConfrimFriendRequest(String userid,String senderid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ConfrimFriendRequest");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("senderid",senderid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/ConfrimFriendRequest", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/ConfrimFriendRequest", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void CheckLikeAsync(String userid,String userstatusid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CheckLikeAsync(userid, userstatusid, null);
    }
    
    public void CheckLikeAsync(final String userid,final String userstatusid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return CheckLike(userid, userstatusid, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("CheckLike", result);
                }
            }
        }.execute();
    }
    
    public int CheckLike(String userid,String userstatusid){
        return CheckLike(userid, userstatusid, null);
    }
    
    public int CheckLike(String userid,String userstatusid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","CheckLike");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("userstatusid",userstatusid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/CheckLike", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/CheckLike", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void GetStatusLikeNameAsync(String userstatusid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetStatusLikeNameAsync(userstatusid, null);
    }
    
    public void GetStatusLikeNameAsync(final String userstatusid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetStatusLikeName(userstatusid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetStatusLikeName", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetStatusLikeName(String userstatusid){
        return GetStatusLikeName(userstatusid, null);
    }
    
    public Vectoronline GetStatusLikeName(String userstatusid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetStatusLikeName");
        soapReq.addProperty("userstatusid",userstatusid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetStatusLikeName", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetStatusLikeName", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void SendFriendRequestAsync(String senderid,String friendid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SendFriendRequestAsync(senderid, friendid, null);
    }
    
    public void SendFriendRequestAsync(final String senderid,final String friendid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                SendFriendRequest(senderid, friendid, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("SendFriendRequest", result);
                }
            }
        }.execute();
    }
    
    public void SendFriendRequest(String senderid,String friendid){
        SendFriendRequest(senderid, friendid, null);
    }
    
    public void SendFriendRequest(String senderid,String friendid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","SendFriendRequest");
        soapReq.addProperty("senderid",senderid);
        soapReq.addProperty("friendid",friendid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/SendFriendRequest", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/SendFriendRequest", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void CheckFriendAsync(String senderid,String friendid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CheckFriendAsync(senderid, friendid, null);
    }
    
    public void CheckFriendAsync(final String senderid,final String friendid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return CheckFriend(senderid, friendid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("CheckFriend", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline CheckFriend(String senderid,String friendid){
        return CheckFriend(senderid, friendid, null);
    }
    
    public Vectoronline CheckFriend(String senderid,String friendid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","CheckFriend");
        soapReq.addProperty("senderid",senderid);
        soapReq.addProperty("friendid",friendid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/CheckFriend", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/CheckFriend", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetFriendDetailsAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFriendDetailsAsync(userid, null);
    }
    
    public void GetFriendDetailsAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetFriendDetails(userid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFriendDetails", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetFriendDetails(String userid){
        return GetFriendDetails(userid, null);
    }
    
    public Vectoronline GetFriendDetails(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetFriendDetails");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetFriendDetails", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetFriendDetails", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetFriendRequestCountAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFriendRequestCountAsync(userid, null);
    }
    
    public void GetFriendRequestCountAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetFriendRequestCount(userid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetFriendRequestCount", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetFriendRequestCount(String userid){
        return GetFriendRequestCount(userid, null);
    }
    
    public Vectoronline GetFriendRequestCount(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetFriendRequestCount");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetFriendRequestCount", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetFriendRequestCount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetUnReadMessageCountAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUnReadMessageCountAsync(userid, null);
    }
    
    public void GetUnReadMessageCountAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetUnReadMessageCount(userid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetUnReadMessageCount", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetUnReadMessageCount(String userid){
        return GetUnReadMessageCount(userid, null);
    }
    
    public Vectoronline GetUnReadMessageCount(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetUnReadMessageCount");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetUnReadMessageCount", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetUnReadMessageCount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetUnReadMessageCountByFriendAsync(String userid,String friendId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUnReadMessageCountByFriendAsync(userid, friendId, null);
    }
    
    public void GetUnReadMessageCountByFriendAsync(final String userid,final String friendId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetUnReadMessageCountByFriend(userid, friendId, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetUnReadMessageCountByFriend", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetUnReadMessageCountByFriend(String userid,String friendId){
        return GetUnReadMessageCountByFriend(userid, friendId, null);
    }
    
    public Vectoronline GetUnReadMessageCountByFriend(String userid,String friendId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetUnReadMessageCountByFriend");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("friendId",friendId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetUnReadMessageCountByFriend", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetUnReadMessageCountByFriend", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetOnlineFriendAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetOnlineFriendAsync(userid, null);
    }
    
    public void GetOnlineFriendAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetOnlineFriend(userid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetOnlineFriend", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetOnlineFriend(String userid){
        return GetOnlineFriend(userid, null);
    }
    
    public Vectoronline GetOnlineFriend(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetOnlineFriend");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetOnlineFriend", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetOnlineFriend", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void UpdateLogOnUserAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateLogOnUserAsync(userid, null);
    }
    
    public void UpdateLogOnUserAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                UpdateLogOnUser(userid, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpdateLogOnUser", result);
                }
            }
        }.execute();
    }
    
    public void UpdateLogOnUser(String userid){
        UpdateLogOnUser(userid, null);
    }
    
    public void UpdateLogOnUser(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","UpdateLogOnUser");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/UpdateLogOnUser", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/UpdateLogOnUser", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void GetUserFriendIdAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUserFriendIdAsync(null);
    }
    
    public void GetUserFriendIdAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetUserFriendId(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetUserFriendId", result);
                }
            }
        }.execute();
    }
    
    public String GetUserFriendId(){
        return GetUserFriendId(null);
    }
    
    public String GetUserFriendId(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetUserFriendId");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetUserFriendId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetUserFriendId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetCurrentUserAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetCurrentUserAsync(null);
    }
    
    public void GetCurrentUserAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetCurrentUser(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetCurrentUser", result);
                }
            }
        }.execute();
    }
    
    public String GetCurrentUser(){
        return GetCurrentUser(null);
    }
    
    public String GetCurrentUser(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetCurrentUser");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetCurrentUser", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetCurrentUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetEncryptCurrentUserAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetEncryptCurrentUserAsync(null);
    }
    
    public void GetEncryptCurrentUserAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetEncryptCurrentUser(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetEncryptCurrentUser", result);
                }
            }
        }.execute();
    }
    
    public String GetEncryptCurrentUser(){
        return GetEncryptCurrentUser(null);
    }
    
    public String GetEncryptCurrentUser(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetEncryptCurrentUser");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetEncryptCurrentUser", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetEncryptCurrentUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetSvimEduClassIdAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetSvimEduClassIdAsync(null);
    }
    
    public void GetSvimEduClassIdAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetSvimEduClassId(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetSvimEduClassId", result);
                }
            }
        }.execute();
    }
    
    public String GetSvimEduClassId(){
        return GetSvimEduClassId(null);
    }
    
    public String GetSvimEduClassId(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetSvimEduClassId");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetSvimEduClassId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetSvimEduClassId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetSvimClassIdAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetSvimClassIdAsync(null);
    }
    
    public void GetSvimClassIdAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetSvimClassId(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetSvimClassId", result);
                }
            }
        }.execute();
    }
    
    public String GetSvimClassId(){
        return GetSvimClassId(null);
    }
    
    public String GetSvimClassId(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetSvimClassId");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetSvimClassId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetSvimClassId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetSvimEduOriginalClassIdAsync(String classidField,String instituteid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetSvimEduOriginalClassIdAsync(classidField, instituteid, null);
    }
    
    public void GetSvimEduOriginalClassIdAsync(final String classidField,final String instituteid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorUpdates>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorUpdates doInBackground(Void... params) {
                return GetSvimEduOriginalClassId(classidField, instituteid, headers);
            }
            @Override
            protected void onPostExecute(VectorUpdates result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetSvimEduOriginalClassId", result);
                }
            }
        }.execute();
    }
    
    public VectorUpdates GetSvimEduOriginalClassId(String classidField,String instituteid){
        return GetSvimEduOriginalClassId(classidField, instituteid, null);
    }
    
    public VectorUpdates GetSvimEduOriginalClassId(String classidField,String instituteid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetSvimEduOriginalClassId");
        soapReq.addProperty("classid",classidField);
        soapReq.addProperty("instituteid",instituteid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetSvimEduOriginalClassId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetSvimEduOriginalClassId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorUpdates resultVariable = new VectorUpdates(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetUserPicAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUserPicAsync(null);
    }
    
    public void GetUserPicAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetUserPic(headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetUserPic", result);
                }
            }
        }.execute();
    }
    
    public String GetUserPic(){
        return GetUserPic(null);
    }
    
    public String GetUserPic(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetUserPic");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetUserPic", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetUserPic", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetStatusAsync(String userid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetStatusAsync(userid, null);
    }
    
    public void GetStatusAsync(final String userid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorUpdates>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorUpdates doInBackground(Void... params) {
                return GetStatus(userid, headers);
            }
            @Override
            protected void onPostExecute(VectorUpdates result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetStatus", result);
                }
            }
        }.execute();
    }
    
    public VectorUpdates GetStatus(String userid){
        return GetStatus(userid, null);
    }
    
    public VectorUpdates GetStatus(String userid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetStatus");
        soapReq.addProperty("userid",userid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetStatus", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetStatus", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorUpdates resultVariable = new VectorUpdates(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetStatus1Async(String userid,String statustime) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetStatus1Async(userid, statustime, null);
    }
    
    public void GetStatus1Async(final String userid,final String statustime,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorUpdates>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorUpdates doInBackground(Void... params) {
                return GetStatus1(userid, statustime, headers);
            }
            @Override
            protected void onPostExecute(VectorUpdates result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetStatus1", result);
                }
            }
        }.execute();
    }
    
    public VectorUpdates GetStatus1(String userid,String statustime){
        return GetStatus1(userid, statustime, null);
    }
    
    public VectorUpdates GetStatus1(String userid,String statustime,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetStatus1");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("statustime",statustime);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetStatus1", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetStatus1", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorUpdates resultVariable = new VectorUpdates(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void InsertStatusAsync(String userid,String status) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        InsertStatusAsync(userid, status, null);
    }
    
    public void InsertStatusAsync(final String userid,final String status,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                InsertStatus(userid, status, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("InsertStatus", result);
                }
            }
        }.execute();
    }
    
    public void InsertStatus(String userid,String status){
        InsertStatus(userid, status, null);
    }
    
    public void InsertStatus(String userid,String status,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","InsertStatus");
        soapReq.addProperty("userid",userid);
        soapReq.addProperty("status",status);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/InsertStatus", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/InsertStatus", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void GetSearchResultAsync(String searchtext,String instituteid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetSearchResultAsync(searchtext, instituteid, null);
    }
    
    public void GetSearchResultAsync(final String searchtext,final String instituteid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetSearchResult(searchtext, instituteid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetSearchResult", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetSearchResult(String searchtext,String instituteid){
        return GetSearchResult(searchtext, instituteid, null);
    }
    
    public Vectoronline GetSearchResult(String searchtext,String instituteid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetSearchResult");
        soapReq.addProperty("searchtext",searchtext);
        soapReq.addProperty("instituteid",instituteid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetSearchResult", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetSearchResult", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetLogoImageByInstituteIdAsync(String instituteid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetLogoImageByInstituteIdAsync(instituteid, null);
    }
    
    public void GetLogoImageByInstituteIdAsync(final String instituteid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetLogoImageByInstituteId(instituteid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetLogoImageByInstituteId", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetLogoImageByInstituteId(String instituteid){
        return GetLogoImageByInstituteId(instituteid, null);
    }
    
    public Vectoronline GetLogoImageByInstituteId(String instituteid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetLogoImageByInstituteId");
        soapReq.addProperty("instituteid",instituteid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetLogoImageByInstituteId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetLogoImageByInstituteId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetBackgroundImageByInstituteIdAsync(String instituteid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetBackgroundImageByInstituteIdAsync(instituteid, null);
    }
    
    public void GetBackgroundImageByInstituteIdAsync(final String instituteid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectoronline>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectoronline doInBackground(Void... params) {
                return GetBackgroundImageByInstituteId(instituteid, headers);
            }
            @Override
            protected void onPostExecute(Vectoronline result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetBackgroundImageByInstituteId", result);
                }
            }
        }.execute();
    }
    
    public Vectoronline GetBackgroundImageByInstituteId(String instituteid){
        return GetBackgroundImageByInstituteId(instituteid, null);
    }
    
    public Vectoronline GetBackgroundImageByInstituteId(String instituteid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","GetBackgroundImageByInstituteId");
        soapReq.addProperty("instituteid",instituteid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/GetBackgroundImageByInstituteId", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/GetBackgroundImageByInstituteId", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectoronline resultVariable = new Vectoronline(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    
}
